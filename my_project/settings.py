"""
Django settings for my_project project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from decouple import config
import dj_database_url

  # Reading from .env file


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY =  os.environ.get('DJANGO_SECRET_KEY')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG')

# Add to settings.py
if not DEBUG:
    DEFAULT_FILE_STORAGE = os.environ.get('default_file_storage')
    AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
    # Other AWS settings


ALLOWED_HOSTS = ['localhost', '127.0.0.1', '0.0.0.0', 'my-project-latest.onrender.com']


# Application definition

INSTALLED_APPS = [
    'storages',
     'cloudinary',
    'cloudinary_storage',
    'crispy_forms',
    'crispy_bootstrap5',
    'crispy_tailwind',
    'users.apps.UsersConfig',
    'blog.apps.BlogConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.github',
]

MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'my_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'my_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': config('DB_NAME', default=None),
#         'USER': config('DB_USER', default=None),
#         'PASSWORD': config('DB_PASSWORD', default=None),
#         'HOST': 'localhost',
#         'PORT': '5432',
#     }
# }

DATABASES = {
    'default': dj_database_url.config(
        default='sqlite:///db.sqlite3',  # Local fallback
        conn_max_age=600,
        ssl_require=False,  # Set to True only for production PostgreSQL
    )
}

# For production, enable SSL
if os.environ.get('ENVIRONMENT') == 'production':
    DATABASES['default']['OPTIONS'] = {'sslmode': 'require'}

# AWS S3 Configuration
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
AWS_S3_SIGNATURE_VERSION = 's3v4'
AWS_S3_REGION_NAME = 'eu-north-1'  # Or use config('AWS_S3_REGION_NAME', default='eu-north-1')
AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = 'public-read'  # Choose either 'public-read' or None
AWS_QUERYSTRING_AUTH = False
AWS_S3_VERIFY = True

AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com'


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

from dotenv import load_dotenv

# Load environment variables from the .env file
load_dotenv()

# Load .env or .pro.env depending on DJANGO_ENV
# For local dev only
if os.environ.get('DJANGO_ENV') != 'production':
    from dotenv import load_dotenv
    load_dotenv(dotenv_path=os.path.join(BASE_DIR, '.env'))



STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'blog/static']
MEDIA_URL = os.environ.get("media_url")  #'/media/'                            

 #'/media/' 
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_STORAGE = os.environ.get("staticfiles_storage")
DEFAULT_FILE_STORAGE = os.environ.get("default_file_storage") 

# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


LOGIN_REDIRECT_URL = 'blog-home'  # Where to redirect after login
LOGIN_URL = '/login/'               # URL to redirect unauthorized users
LOGOUT_REDIRECT_URL = 'login'  # Optional: If you want immediate redirect

# Message tags
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'


SITE_ID = 1

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)



SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.environ.get('GOOGLE_CLIENT_ID'),
            'secret': os.environ.get('GOOGLE_CLIENT_SECRET'),
            'key': '',
        },
        'SCOPE': [
            'profile',
            'email',
        ],
    },
    'github': {
        'APP': {
            'client_id': os.environ.get('GITHUB_CLIENT_ID'),
            'secret': os.environ.get('GITHUB_CLIENT_SECRET'),
            'key': '',
        },
        'SCOPE': [
            'user',
            'user:email',
        ],
    },
}


SOCIALACCOUNT_LOGIN_ON_GET = True

CRISPY_TEMPLATE_PACK = "tailwind"  # ✅ If using Tailwind CSS
CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind" # ✅ If using Tailwind CSS and Bootstrap 5






from django.db.utils import ProgrammingError, OperationalError
import django
from django.conf import settings

def create_default_site():
    # Only run this code if sites app is installed
    if 'django.contrib.sites' in settings.INSTALLED_APPS:
        from django.contrib.sites.models import Site
        
        # Ensure SITE_ID is set
        if not hasattr(settings, 'SITE_ID'):
            settings.SITE_ID = 1
            
        # Try to create the default site if it doesn't exist
        try:
            Site.objects.get_or_create(
                id=settings.SITE_ID,
                defaults={
                    'domain': 'my-project-latest.onrender.com',
                    'name': 'My Project'
                }
            )
        except (ProgrammingError, OperationalError):
            # Database might not be ready yet, which is fine
            pass

# Try to create the site when Django initializes
try:
    create_default_site()
except:
    # If there's any error, we'll handle it gracefully
    pass
